import streamlit as st
import pandas as pd
from datetime import datetime

# Set page config
st.set_page_config(
    page_title="My Personal Spaces",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Initialize session state for spaces if it doesn't exist
if 'spaces' not in st.session_state:
    st.session_state.spaces = {
        'Data Processing': {
            'type': 'tool',
            'description': 'Tools for processing different types of data',
            'tools': ['CSV Processor', 'Text Analyzer', 'Wave Route Parser']  # Added Wave Route Parser
        },
        'Medical Research': {
            'type': 'research',
            'description': 'Personal health research and notes',
            'notes': []
        },
        'Study Notes': {
            'type': 'research',
            'description': 'General study and learning notes',
            'notes': []
        }
    }

def main():
    # Sidebar for navigation
    st.sidebar.title("My Spaces")



    # Add new space button
    if st.sidebar.button("+ Create New Space"):
        create_new_space()

    # Space selection
    selected_space = st.sidebar.selectbox(
        "Select Space",
        options=list(st.session_state.spaces.keys())
    )

    # Main content area
    st.title(selected_space)
    st.write(st.session_state.spaces[selected_space]['description'])

    # Display different content based on space type
    if st.session_state.spaces[selected_space]['type'] == 'tool':
        show_tool_space(selected_space)
    else:
        show_research_space(selected_space)

def create_new_space():
    st.sidebar.subheader("Create New Space")
    space_name = st.sidebar.text_input("Space Name")
    space_type = st.sidebar.selectbox("Space Type", ["tool", "research"])
    space_description = st.sidebar.text_area("Description")

    if st.sidebar.button("Create"):
        if space_name and space_name not in st.session_state.spaces:
            st.session_state.spaces[space_name] = {
                'type': space_type,
                'description': space_description,
                'tools' if space_type == 'tool' else 'notes': [] if space_type == 'research' else ['Basic Processor']
            }
            st.sidebar.success(f"Created new space: {space_name}")

def show_tool_space(space_name):
    st.subheader("Available Tools")

    # Tool selection
    selected_tool = st.selectbox(
        "Select Tool",
        options=st.session_state.spaces[space_name]['tools']
    )

    # Tool interface
    if selected_tool == "CSV Processor":
        show_csv_processor()
    elif selected_tool == "Text Analyzer":
        show_text_analyzer()

def show_research_space(space_name):
    st.subheader("Research Notes")

    # Add new note
    new_note = st.text_area("Add New Note")
    if st.button("Save Note"):
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        st.session_state.spaces[space_name]['notes'].append({
            'timestamp': timestamp,
            'content': new_note
        })

    # Display existing notes
    for note in st.session_state.spaces[space_name]['notes']:
        with st.expander(f"Note from {note['timestamp']}"):
            st.write(note['content'])

def show_csv_processor():
    st.subheader("CSV Processor")
    uploaded_file = st.file_uploader("Upload CSV file", type=['csv'])

    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file)
        st.write("Preview of your data:")
        st.dataframe(df.head())

        # Basic data processing options
        if st.button("Show Basic Statistics"):
            st.write(df.describe())

        # Add more processing options as needed

def show_text_analyzer():
    st.subheader("Text Analyzer")
    text_input = st.text_area("Enter text to analyze")

    if text_input:
        # Basic text analysis
        word_count = len(text_input.split())
        char_count = len(text_input)

        col1, col2 = st.columns(2)
        col1.metric("Word Count", word_count)
        col2.metric("Character Count", char_count)

        # Add more text analysis features as needed

if __name__ == "__main__":
    main()